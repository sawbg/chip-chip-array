.TH "ChipChipArray::Grabber" 3 "Sun Feb 28 2016" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ChipChipArray::Grabber \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Grabber\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBGrabber\fP (\fBZone\fP zone, \fBSide\fP side)"
.br
.ti -1c
.RI "\fB~Grabber\fP ()"
.br
.ti -1c
.RI "\fBResult\fP \fBLoad\fP ()"
.br
.ti -1c
.RI "void \fBClose\fP ()"
.br
.ti -1c
.RI "\fBBlock\fP \fBLocateBlock\fP ()"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBDiscard\fP ()"
.br
.ti -1c
.RI "void \fBExtend\fP ()"
.br
.ti -1c
.RI "bool \fBFindBlock\fP ()"
.br
.ti -1c
.RI "\fBColor\fP \fBFindColor\fP ()"
.br
.ti -1c
.RI "\fBSize\fP \fBFindSize\fP ()"
.br
.ti -1c
.RI "void \fBGrab\fP (\fBBlockPosition\fP pos)"
.br
.ti -1c
.RI "void \fBPlace\fP (\fBColor\fP color)"
.br
.ti -1c
.RI "void \fBPlace\fP (\fBColor\fP color, \fBBlockPosition\fP pos)"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class finds blocks, identifies them, and sorts them according to color, size, and zone\&. 
.PP
Definition at line 19 of file Grabber\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "ChipChipArray::Grabber::Grabber (\fBZone\fPzone, \fBSide\fPside)"
Initializes the class according to the side and zone and extends the robotic arm into position\&.
.PP
\fBParameters:\fP
.RS 4
\fIzone\fP the zone (A, B, or C) for which to pick up blocks\&.
.br
\fIside\fP the side from which the robot is moving and the position of the blocks (right or left) in the view of the camera to pick up first 
.RE
.PP

.PP
Definition at line 154 of file Grabber\&.hpp\&.
.SS "ChipChipArray::Grabber::~Grabber ()"
Destructs the class and retracts the arm\&. 
.PP
Definition at line 173 of file Grabber\&.hpp\&.
.SH "Member Function Documentation"
.PP 
.SS "void ChipChipArray::Grabber::Close ()"

.PP
Definition at line 177 of file Grabber\&.hpp\&.
.SS "void ChipChipArray::Grabber::Discard ()\fC [protected]\fP"
Takes block currently in the arm's pinchers and places to side of robot opposite the loading zone\&. 
.PP
Definition at line 183 of file Grabber\&.hpp\&.
.SS "void ChipChipArray::Grabber::Extend ()\fC [protected]\fP"
Sets arm to generic position roughly right above a stack of blocks\&. 
.PP
Definition at line 187 of file Grabber\&.hpp\&.
.SS "bool ChipChipArray::Grabber::FindBlock ()\fC [protected]\fP"
Whether there is little doubt that a block is within reach based on the image from the camera\&.
.PP
\fBReturns:\fP
.RS 4
if a block is within reach 
.RE
.PP

.PP
Definition at line 191 of file Grabber\&.hpp\&.
.SS "\fBColor\fP ChipChipArray::Grabber::FindColor ()\fC [protected]\fP"
Examines block in pinchers for a definite color and returns most likely Color\&. For Zones B and C only\&.
.PP
\fBReturns:\fP
.RS 4
the Color of the current block 
.RE
.PP

.PP
Definition at line 195 of file Grabber\&.hpp\&.
.SS "\fBSize\fP ChipChipArray::Grabber::FindSize ()\fC [protected]\fP"
Determines if block is short or long\&. It is assumed to be long if there is uncertainty\&. Zone B only\&.
.PP
\fBReturns:\fP
.RS 4
the Size of the current block 
.RE
.PP

.PP
Definition at line 199 of file Grabber\&.hpp\&.
.SS "void ChipChipArray::Grabber::Grab (\fBBlockPosition\fPpos)\fC [protected]\fP"
Picks up block by ezaming how much it fills up the camera image and where its edges are\&. It is then decided where to grab the block, and the block is picked up\&.
.PP
\fBParameters:\fP
.RS 4
\fIpos\fP whether the (half-)block is closer to the robot (FRONT) or farther away (BACK)\&. 
.RE
.PP

.PP
Definition at line 203 of file Grabber\&.hpp\&.
.SS "\fBResult\fP ChipChipArray::Grabber::Load ()"
Loads a block(s) (if possible) at the robot's current position\&.
.PP
\fBReturns:\fP
.RS 4
the number of half and whole blocks loaded 
.RE
.PP

.PP
Definition at line 207 of file Grabber\&.hpp\&.
.SS "\fBBlock\fP ChipChipArray::Grabber::LocateBlock ()"

.PP
Definition at line 211 of file Grabber\&.hpp\&.
.SS "void ChipChipArray::Grabber::Place (\fBColor\fPcolor)\fC [protected]\fP"
Puts block in slot according to color\&. Zones B and C only\&.
.PP
\fBParameters:\fP
.RS 4
\fIthe\fP slot into which to place the block 
.RE
.PP

.SS "void ChipChipArray::Grabber::Place (\fBColor\fPcolor, \fBBlockPosition\fPpos)\fC [protected]\fP"
Puts half-blocks in the unloader according to whether there is already a half-block in the corresponding slot\&. Zone B only\&.
.PP
\fBParameters:\fP
.RS 4
\fIcolor\fP the slot into which to place the block
.br
\fIpos\fP the block position (FRONT/BACK)\&. BACK denotes there is already a half-block stored in the slot, as the FRONT blocks are picked up first\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
